---
title: "figures"
format: gfm
editor: visual
---

# Setup

```{r}
library(glue)
library(tidyverse)
set.seed(42)
```

```{r}
# https://github.com/wilkelab/cowplot/issues/202#issuecomment-1981802127
my_get_legend <- function(plot, legend = NULL) {
  
  gt <- ggplotGrob(plot)
  
  pattern <- "guide-box"
  if (!is.null(legend)) {
    pattern <- paste0(pattern, "-", legend)
  }
  
  indices <- grep(pattern, gt$layout$name)

  not_empty <- !vapply(
    gt$grobs[indices], 
    inherits, what = "zeroGrob", 
    FUN.VALUE = logical(1)
  )
  indices <- indices[not_empty]
  
  if (length(indices) > 0) {
    return(gt$grobs[[indices[1]]])
  }
  return(NULL)
}
```

# Plot

## Metrics

```{r}
model_levels <-
  c(
    "gene-cpd\nsimil.",
    "1-NN\n(cpd)",
    "1-NN\n(gene)",
    "1-NN\n(gene+cpd)",
    "model\n(w/o embed.)",
    "model\n(w embed.)"
  )

palette_model <-
  c("#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#E5C494")

names(palette_model) <- model_levels
```

```{r}
plot_metrics <- function(formulation_) {
  metrics <-
    arrow::read_parquet(glue("output/prediction_metrics_at_k_rel_bootstrap_melted_filtered_{formulation_}.parquet"))
  
  p <- 
    metrics %>%
    ggplot(aes(model, estimate, fill = model)) +
    geom_col(width = .7, position = position_dodge(width = 0.9)) +
    geom_errorbar(
      aes(ymin = lci, ymax = uci),
      color = "black",
      width = .2,
      position = position_dodge(width = 0.9)
    ) +
    scale_fill_manual(values = palette_model) +
    ylim(0, .25) +
    theme(axis.text.x = element_text(
      angle = 90,
      vjust = 0.5,
      hjust = 1
    )) +
    xlab("") +
    ylab("Precison@R (top ~1%)") +
    theme_minimal() +
    theme(legend.position = "none")
  
  ggsave(glue("figures/lo_{formulation_}_precision.png"), p, width = 5, height = 3)
  
  p
  
}
```

```{r}
(p_lo_compound_precision <- plot_metrics("compound"))
(p_lo_gene_precision <- plot_metrics("gene"))
(p_lo_either_precision <- plot_metrics("either"))
```

## Edge counts

Training bias: counts of true test set connections (based on ORF features, so only one connection for each gene-compound pair)

```{r}
which_connected_train_levels <-
  c("both", "compound", "gene", "neither")

palette_manual_dark_2 <-
  c("#1B9E77", "#D95F02", "#E6AB02", "#7570B3")

names(palette_manual_dark_2) <- which_connected_train_levels
```

```{r}
true_test_edge_counts <- 
  arrow::read_parquet("output/true_test_edge_counts.parquet")
```

```{r}
plot_counts <- function(formulation_) {
  p <-
    true_test_edge_counts %>%
    filter(formulation == formulation_) %>%
    ggplot(aes(formulation, n, fill = which_connected_train)) +
    geom_col() +
    geom_text(aes(label = n, y = label_y), vjust = 1.5) +
    scale_fill_manual(values = palette_manual_dark_2) +
    theme_minimal() +
    theme(
      legend.position = "bottom",
      legend.direction = "vertical",
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    ) +
    labs(fill = "Connection in\ntraining",
         y = "Num. of positive gene-compound pairs (test)",
         x = NULL)
  
  ggsave(
    glue("figures/lo_{formulation_}_training_bias_counts.png"),
    p,
    width = 3,
    height = 5
  )
  
  p
}
```

```{r}
(p_lo_compound_training_bias_counts <- plot_counts("compound"))
(p_lo_gene_training_bias_counts <- plot_counts("gene"))
(p_lo_either_training_bias_counts <- plot_counts("either"))
```

## Edge percentiles

Gene or compound present in train in a true gene-compound connection

Predictions are significantly worse if gene or compound was not seen in training in a true gene-compound connection (in supervised scenario)

Each point is a true gene-compound connection (test)

```{r}
training_bias <- arrow::read_parquet("output/training_bias.parquet")
```

```{r}
plot_training_global_a <- function(classifier_, prediction_type_, formulation_) {

  if (prediction_type_ == "global_percentile") {
    prediction_col <- sym("gene_compound_global_pct")
    ylab_text <- "Percentile of pos. gene-cpd. pair (test)"
  } else if (prediction_type_ == "local_percentile") {
    prediction_col <- sym("gene_compound_local_pct")
    ylab_text <- "Average percentile of the connection\namong all gene-compound pairs\n(test)"
  } else if (prediction_type_ == "prob") {
    prediction_col <- sym("y_prob")
    ylab_text <- "Predicted probability of \nthe connection being true\n(test)"
  } else {
    stop(glue("prediction_type {prediction_type_} unknown"))
  }

  p <-
    training_bias %>%
    filter(formulation == formulation_) %>%
    filter(classifier == classifier_) %>%
    mutate(features = str_replace(features, "__max_consensus", "_max")) %>%
    filter(features == "crispr_orf_max") %>%
    ggplot(aes(features, !!prediction_col, fill = which_connected_train)) +
    geom_dotplot(
      binaxis = "y",
      stackdir = "center",
      dotsize = 1.5,
      stroke = 0,
      position = "dodge",
      binpositions = "all",
      stackgroups = TRUE,
      binwidth = .01
    ) +
    ylab(ylab_text) +
    scale_y_reverse(labels = scales::label_percent()) +
    scale_fill_manual(values = palette_manual_dark_2) +
    theme_minimal() +
    theme(
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      legend.position = "bottom"
    ) +
    labs(fill = "Connection in\ntraining",
         y = ylab_text,
         x = NULL)    

  ggsave(
    glue("figures/lo_{formulation_}_training_bias_a_{prediction_type_}_{classifier_}.png"),
    p,
    width = 8,
    height = 5
  )

  p
}
```

```{r}
(p_lo_compound_test_edge_percentile <- 
    plot_training_global_a("transformer", prediction_type_ = "global_percentile", formulation_ = "compound"))

(p_lo_gene_test_edge_percentile <- 
    plot_training_global_a("transformer", prediction_type_ = "global_percentile", formulation_ = "gene"))

(p_lo_either_test_edge_percentile <- 
    plot_training_global_a("transformer", prediction_type_ = "global_percentile", formulation_ = "either"))
```

## Edge percentiles across counts

```{r}
prediction_df_transformer_crispr_orf_max <- 
  arrow::read_parquet("output/prediction_df_transformer_crispr_orf_max.parquet")

condition_positive_crispr_orf_max <-
  arrow::read_parquet("output/condition_positive_crispr_orf_max.parquet")
```

Seeing other compounds targeting the same gene improves prediction

Each point is a true gene-compound connection (test)

n_genes = \# genes connected to the compound (training)

n_cpds = \# compounds connected to the gene (training)

```{r}
plot_pct_across_count <- function(formulation_, which_count) {
  if (which_count == "gene") {
    prediction_df_transformer_crispr_orf_max <-
      prediction_df_transformer_crispr_orf_max %>%
      mutate(n_cpds = as.factor(n_cpds))
    
    x_var <- "n_cpds"
    facet_var <- "n_genes"
    
  } else if (which_count == "compound") {
    prediction_df_transformer_crispr_orf_max <-
      prediction_df_transformer_crispr_orf_max %>%
      mutate(n_genes = as.factor(n_genes))
    
    x_var <- "n_genes"
    facet_var <- "n_cpds"
    
  } else {
    stop()
  }
  
  p <-
    prediction_df_transformer_crispr_orf_max %>%
    filter(formulation == formulation_) %>%
    ggplot(aes(.data[[x_var]],
               gene_compound_global_pct)) +
    geom_point(alpha = 0.5, aes(color = which_connected_train)) +
    geom_hline(
      data = condition_positive_crispr_orf_max %>% filter(formulation == formulation_),
      aes(yintercept = p_frac),
      color = "red"
    ) +
    scale_y_continuous(
      trans = scales::trans_new(
        name = "log10_reverse",
        transform = function(x)
          - log10(x),
        inverse = function(x)
          10 ^ (-x)
      ),
      labels = scales::percent_format(scale = 100),
      breaks = c(0, 1, 10, 50, 100) / 100
    ) +
    scale_color_manual(values = palette_manual_dark_2)
  
  if (which_count == "gene") {
    p <- p +
      facet_wrap( ~ n_genes,
                  labeller = labeller(n_genes = label_both),
                  nrow = 1)
  } else if (which_count == "compound") {
    p <- p +
      facet_wrap( ~ n_cpds,
                  labeller = labeller(n_cpds = label_both),
                  nrow = 1)
  } else {
    stop()
  }
  
  p <- p +
    labs(color = "Connection in\ntraining",
         y = "Percentile of pos. gene-cpd. pair (test; log scale)") +
    theme_minimal()
  
  ggsave(
    glue(
      "figures/lo_{formulation_}_pct_across_{which_count}_count.png"
    ),
    p,
    width = 8,
    height = 5
  )
  
  p
  
}

```

```{r}
(p_lo_compound_pct_across_gene_count <- 
   plot_pct_across_count(formulation_ = "compound", which_count = "gene"))

(p_lo_gene_pct_across_gene_count <- 
    plot_pct_across_count(formulation_ = "gene", which_count = "gene"))

(p_lo_either_pct_across_gene_count <- 
    plot_pct_across_count(formulation_ = "either", which_count = "gene"))
```

```{r}
(p_lo_compound_pct_across_compound_count <- 
   plot_pct_across_count(formulation_ = "compound", which_count = "compound"))

(p_lo_gene_pct_across_compound_count <- 
    plot_pct_across_count(formulation_ = "gene", which_count = "compound"))

(p_lo_either_pct_across_compound_count <- 
    plot_pct_across_count(formulation_ = "either", which_count = "compound"))
```

```{r eval=FALSE}
p <-
  prediction_df_transformer_crispr_orf_max %>%
  inner_join(condition_positive_crispr_orf_max, by = c("formulation", "features")) %>%
  mutate(tp = gene_compound_global_pct < p_frac) %>%
  group_by(formulation, features, n_genes, n_cpds) %>%
  summarise(
    gene_compound_global_pct = mean(gene_compound_global_pct),
    tp = mean(tp),
    n = n(),
    .groups = "keep"
  ) %>%
  ggplot(aes(n_cpds, n_genes)) +
  geom_point(aes(size = tp), alpha = 0.5) +
#  geom_point(aes(size = n), color = "red", alpha = 0.2) +
  geom_text(aes(n_cpds, n_genes - 0.3, label = glue("n:{n}")), size = 3, color = "red") +
  geom_text(aes(n_cpds, n_genes + 0.3, label = glue("tp:{round(tp, 2)}")), size = 3, color = "black") +
  coord_equal() +
  scale_y_continuous(breaks=seq(0, 7, 1), limits = c(-0.5, 7.5)) +
  scale_x_continuous(breaks=seq(0, 7, 1), limits = c(-0.5, 7.5)) +
  theme_bw() +
  ggtitle("Inspecting leave-out-either", subtitle = "Seeing other compounds targeting the same gene improves prediction\nSeeing other genes targeted by the same compound marginally improves prediction") +
  labs(caption = "tp = average number of true positives. n = number of connections\nn_genes = Num. of genes connected to the compound (training); n_cpds = # compounds connected to the gene (training)") +
  theme(plot.caption = element_text(face = "italic"),
        legend.position = "bottom") +
  facet_wrap(~formulation, ncol = 3)

print(p)
```

# Arrange

## Fig 2

```{r}
p_fig2 <- 
  cowplot::plot_grid(
  p_lo_compound_precision,
  p_lo_compound_training_bias_counts + theme(legend.position="none"),
  p_lo_compound_test_edge_percentile + theme(legend.position="none"),
  p_lo_compound_pct_across_gene_count + theme(legend.position="none"),
  labels = "AUTO",
  rel_widths = c(4.5, 1, 2.5, 2),
  nrow = 1
)

legend <- my_get_legend(
  p_lo_compound_training_bias_counts + theme(legend.box.margin = margin(0, 0, 0, 12))
)

p_fig2_w_legend <- cowplot::plot_grid(p_fig2, legend, rel_widths = c(8, 1))

ggsave(
  glue(
    "figures/figure_2.png"
  ),
  p_fig2_w_legend,
  width = 10,
  height = 4
)

p_fig2_w_legend
  
```

## Fig 3

```{r}
p_fig3 <- 
  cowplot::plot_grid(
  p_lo_gene_precision,
  p_lo_gene_training_bias_counts + theme(legend.position="none"),
  p_lo_gene_test_edge_percentile + theme(legend.position="none"),
  p_lo_gene_pct_across_compound_count + theme(legend.position="none"),
  labels = "AUTO",
  rel_widths = c(4.5, 1, 2.5, 2),
  nrow = 1
)

legend <- my_get_legend(
  p_lo_gene_training_bias_counts + theme(legend.box.margin = margin(0, 0, 0, 12))
)

p_fig3_w_legend <- cowplot::plot_grid(p_fig3, legend, rel_widths = c(8, 1))

ggsave(
  glue(
    "figures/figure_3.png"
  ),
  p_fig3_w_legend,
  width = 10,
  height = 4
)

p_fig3_w_legend
  
```

## Fig 4

```{r}
p_fig4 <- 
  cowplot::plot_grid(
  p_lo_either_precision,
  p_lo_either_training_bias_counts + theme(legend.position="none"),
  p_lo_either_test_edge_percentile + theme(legend.position="none"),
  p_lo_either_pct_across_gene_count + theme(legend.position="none"),
  labels = "AUTO",
  rel_widths = c(4.5, 1, 2.5, 4.5),
  nrow = 1
)

legend <- my_get_legend(
  p_lo_either_training_bias_counts + theme(legend.box.margin = margin(0, 0, 0, 12))
)

p_fig4_w_legend <- cowplot::plot_grid(p_fig4, legend, rel_widths = c(8, 1))

ggsave(
  glue(
    "figures/figure_4.png"
  ),
  p_fig4_w_legend,
  width = 12,
  height = 4
)

p_fig4_w_legend
  
```
